Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 


int partition(int arr[],int l,int u){
	int pivot=arr[u];
	int pIndex=l;
	for(int i =l;i<u;i++){
          if (pivot > arr[i]) {
            int temp = arr[pIndex];
            arr[pIndex] = arr[i];
            arr[i] = temp;
            pIndex++;
          }
        }
        int temp=arr[pIndex];
	arr[pIndex]=arr[u];
	arr[u]=temp;
	return pIndex;
}
void qs(int arr[],int l,int u){
	if(l<u){
		int pIndex=partition(arr,l,u);
		qs(arr,l,pIndex-1);
		qs(arr,pIndex+1,u);
	}
}
void quickSort(int input[], int size) {
	if(size<=1){
		return ;
	}
    qs(input,0,size-1);
}
